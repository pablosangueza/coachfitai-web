@page "/generate"
@using CoachFitAI.Web.State
@using Microsoft.AspNetCore.Components.Forms
@inject AppState State
@inject NavigationManager Nav

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-8 col-lg-6">   <!-- limit width and center -->
      
      <h2 class="cf-h2 text-center mb-4">Your details</h2>

      <EditForm Model="@m" OnValidSubmit="OnSubmit">
        <div class="row g-2">
          <div class="col-md-6">
            <label>Gender</label>
            <InputText @bind-Value="m.Gender" class="form-control" />
          </div>
          <div class="col-md-6">
            <label>Age</label>
            <InputNumber @bind-Value="m.Age" class="form-control" />
          </div>
          <div class="col-md-6">
            <label>Weight (kg)</label>
            <InputNumber @bind-Value="m.WeightKg" class="form-control" />
          </div>
          <div class="col-md-6">
            <label>Height (cm)</label>
            <InputNumber @bind-Value="m.HeightCm" class="form-control" />
          </div>
          <div class="col-md-12">
            <label>Goal</label>
            <InputText @bind-Value="m.Goal" class="form-control" />
          </div>
          <div class="col-md-6">
            <label>Level</label>
            <InputText @bind-Value="m.Level" class="form-control" />
          </div>
          <div class="col-md-6">
            <label>Body type</label>
            <InputText @bind-Value="m.BodyType" class="form-control" />
          </div>
          <div class="col-md-12">
            <label>Restrictions (csv)</label>
            <InputText @bind-Value="restrictionsCsv" class="form-control" />
          </div>

          <div class="col-md-12 mt-3">
            <label>Photo (optional)</label>
            <InputFile OnChange="OnFileChange" accept="image/*" />
            @if (!string.IsNullOrEmpty(m.PhotoUrl))
            {
              <div class="mt-2 text-center">
                <img src="@m.PhotoUrl" alt="preview" style="max-width:220px;border-radius:12px;" />
              </div>
            }
            @if (!string.IsNullOrEmpty(error))
            {
              <div class="text-danger mt-1">@error</div>
            }
          </div>
        </div>

        <div class="text-center">
          <button class="btn btn-success mt-4 px-4" type="submit">Continue to payment</button>
        </div>
      </EditForm>
    </div>
  </div>
</div>


@code {
  class IntakeModel {
    public string Gender { get; set; } = "M";
    public int Age { get; set; } = 30;
    public double WeightKg { get; set; } = 80;
    public double HeightCm { get; set; } = 175;
    public string Goal { get; set; } = "lose_fat";
    public string Level { get; set; } = "beginner";
    public string BodyType { get; set; } = "mesomorph";
    public string DailyActivity { get; set; } = "moderate";
     public string? PhotoUrl { get; set; }
  }

  IntakeModel m = new();
  string restrictionsCsv = "";
  string? error;

  const long MaxBytes = 5 * 1024 * 1024; // 5 MB

  async Task OnFileChange(InputFileChangeEventArgs e)
  {
    error = null;
    var file = e.File;

    try
    {
      if (!file.ContentType.StartsWith("image/"))
        throw new InvalidOperationException("Only image files are allowed.");

      if (file.Size > MaxBytes)
        throw new InvalidOperationException("Max image size is 5 MB.");

      using var ms = new MemoryStream();
      await using var stream = file.OpenReadStream(MaxBytes);
      await stream.CopyToAsync(ms);

      var b64 = Convert.ToBase64String(ms.ToArray());
      m.PhotoUrl = $"data:{file.ContentType};base64,{b64}";  // preview + send to AI
    }
    catch (Exception ex)
    {
      m.PhotoUrl = null;
      error = ex.Message;
    }
  }

  void OnSubmit()
  {
    var dto = new IntakeDto(
      m.Gender, m.Age, m.WeightKg, m.HeightCm, m.Goal, m.Level, m.BodyType,
      restrictionsCsv.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries),
      m.DailyActivity, m.PhotoUrl);

    State.SetIntake(dto);
    Nav.NavigateTo("checkout"); // relative for GH Pages
  }
}
